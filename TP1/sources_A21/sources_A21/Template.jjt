options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< PRINT: "print" > |
	< INPUT: "input" > |
	< BOOLEAN : < TRUE > | < FALSE > > |
    < #FALSE : "false" > |
    < #TRUE : "true" > |
    < WHILE : "while" > |
    < DO : "do" > |
    < IF : "if" > |
    < ELSE : "else" > |
    < FOR : "for" > |
    < TYPE: <INT> | <BOOL> | <FLOAT> > |
    < #INT: "int" > |
    < #BOOL: "bool" > |
    < #FLOAT: "float" > |
    < RETURN: "return" > |
    < SWITCH: "switch" > |
    < CASE: "case" > |
    < DEFAULTCASE : "default" >

	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" > |

    // pas dans le code de base, créé par moi
	<MATHOPERATOR : <PLUS> | <MINUS> | <FOIS> | <DIV>> |
    <ARROW: "->">




	// À compléter au besoin
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	//TODO: Caution! Allows numbers such as "0000.23"... to fix!!! (FIXED)
	< REAL: ((<MINUS>)? ("0" | <INTEGER> ) "." (<INTEGER>)? (<EXPONENT>)?) |
	    ((<MINUS>)? ("0" | <INTEGER>)? "." <INTEGER> (<EXPONENT>)?) |
	    (<MINUS>)? <INTEGER> (<EXPONENT>)? > |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

//
// SYNTAX ANALYSIS
//



// à compléter
void Stmt() #void: { }
{
	((AssignStmt() <SEMICOLON>) | WhileStmt() | DoWhileStmt() | IfStmt() | ForStmt() | SwitchStmt())#Stmt(>1)
}

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() #void: { }
{
	 (Stmt())+
}

// à finir -- commencez ici!
void AssignStmt() : { }
{
    Identifier() <ASSIGN> (LOOKAHEAD(2) Expr() | AnonymousStmt())
}

void WhileStmt() : {}
{
    <WHILE> <LPAREN> Expr() <RPAREN> ((<LACC> Block() <RACC>) | Stmt())
}

void DoWhileStmt() : {}
{
    <DO> <LACC> Block() <RACC> <WHILE> <LPAREN> Expr() <RPAREN> <SEMICOLON>
}

void IfStmt(): {}
{
    <IF> <LPAREN> Expr() <RPAREN> (Stmt() | (<LACC> Block() <RACC>)) (LOOKAHEAD(2) ElseIfStmt())* (LOOKAHEAD(2) ElseStmt())?
}

void ElseIfStmt(): {}
{
    <ELSE> <IF> <LPAREN> Expr() <RPAREN> (Stmt() | (<LACC> Block() <RACC>))
}

void ElseStmt(): {}
{
    <ELSE> (Stmt() | (<LACC> Block() <RACC>))
}

void ForStmt(): {}
{
    <FOR> <LPAREN> (AssignStmt())? <SEMICOLON> (Expr())? <SEMICOLON> (AssignStmt())? <RPAREN> ((<LACC> Block() <RACC>) | Stmt())
}

void Expr() #void: {}
{
    (LogicExpr())#Expr(>1)
}

void LogicExpr() #void: {}
{
    ((CompExpr() | BoolExpr()) (<LOGIC> (CompExpr() | BoolExpr()))*)#LogicExpr(>1)
}

void CompExpr() #void: {}
{
    (AddExpr() (<COMPARE> AddExpr())*)#CompExpr(>1)
}

void AddExpr() #void: {}
{
    (MultExpr() ((<PLUS> | <MINUS> ) MultExpr())*)#AddExpr(>1)
}

void MultExpr() #void: {}
{
    (TermExpr() ((<FOIS> | <DIV> ) TermExpr()) *)#MultExpr(>1)
}

void TermExpr() #void: {}
{
    (<LPAREN> Expr() <RPAREN> | <MINUS> TermExpr() | (<NOT>)+ Identifier() | IntBasicExpr())#TermExpr(>1)
}

void IntBasicExpr() #void: { }
{
	(Identifier() |
     	IntValue() |
     	RealValue())#IntBasicExpr(>1)
}

void Identifier() : { }
{
	<IDENTIFIER>
}

void IntValue() : { }
{
	<INTEGER>
}

void RealValue(): {}
{
    <REAL>
}

void BoolExpr() : { } // pas dans le code de base
{
    <BOOLEAN> (<COMPARE> <BOOLEAN>)?
}

void AnonymousStmt() : { }
{
    <LPAREN> (<TYPE> <IDENTIFIER> (<COMMA> <TYPE> <IDENTIFIER>)*)? <RPAREN> <ARROW> (Stmt() | <LACC> (Block())? (<RETURN> Expr() <SEMICOLON>)? <RACC>)
}

void SwitchStmt(): { }
{
    <SWITCH> <LPAREN> Expr() <RPAREN> <LACC> (CaseStmt())* (DefaultStmt())? <RACC>
}

void CaseStmt(): {}
{
    <CASE> Expr() <COLON> Stmt()
}

void DefaultStmt(): {}
{
    <DEFAULTCASE> <COLON> Stmt()
}


