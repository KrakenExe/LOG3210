options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


// Keywords
TOKEN :
{
	< IF: "if"	> |
	< THEN: "then"	> |
	< ELSE: "else" > |
	< WHILE: "while" > |
	< FOR: "for" > |
	< FOREACH: "foreach" > |
	< BOOLEAN : <TRUE> | <FALSE> > |
	< #TRUE: "true" > |
	< #FALSE: "false" > |
	< DEC : "Declaration"> |
	< ENDDEC : "EndDeclaration">
}

//Type
TOKEN :
{
    < TYPE: <BOOL> | <NUM> | <REALVAL> >|
    < #BOOL: "bool"> |
    < #NUM:  "num"> |
    < #REALVAL: "real"> |
    < ARRAYTYPE: <LISTNUM> | <LISTBOOL> | <LISTREAL>> |
    < #LISTNUM:  "listnum"> |
    < #LISTBOOL:  "listbool">|
    < #LISTREAL: "listreal">

}

// Operators
TOKEN :
{
	<ASSIGN: < EQUAL >  > |
	<COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    <MULOP: <FOIS> | <DIV> | <MOD>> |
    <BOOLOP : <AND> | <OR> > |

    //plus and minus doivent être séparer puisque Minus peut être utilisé seul.
    < PLUS: "+" > |
	< MINUS: "-" > |
	< #EQUAL: "=" > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |
	< #FOIS: "*" > |
	< #DIV: "/" > |
	< #MOD: "%" > |
    < #AND: "&&" > |
    < #OR: "||" > |
    < NOT: "!" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< LSBRAC: "[" > |
	< RSBRAC: "]" > |
	< COLON: ":" > |
	< SEMICOLON : ";" >
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	< REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? |
			  (<INTEGER>)+ <EXPONENT> > |
	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}





//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
    [<DEC> (Declaration() <SEMICOLON>)* <ENDDEC>]
	Block() <EOF> { return jjtThis;  }
}

void Declaration() : {Token t;}
{
    NormalDeclaration() | ListDeclaration()
}

void NormalDeclaration() : {Token t;}
{
    t = <TYPE> {jjtThis.setValue(t.image);} Identifier()
}

void ListDeclaration() : {Token t;}
{
    t = <ARRAYTYPE> {jjtThis.setValue(t.image);} <LSBRAC><RSBRAC> Identifier()
}

void Block() : { }
{
	 ( Stmt() )*
}

void Stmt() : { }
{
	AssignStmt() <SEMICOLON> |
	IfStmt() |
	WhileStmt() |
    ForStmt() |
	ForEachStmt() |
	<SEMICOLON>
}

void ForStmt() : {}
{
    <FOR> <LPAREN> AssignStmt() <SEMICOLON> Expr() <SEMICOLON> AssignStmt() <RPAREN> (<LACC> Block() <RACC> | Stmt())
}

void ForEachStmt() : {}
{
     <FOREACH> <LPAREN> NormalDeclaration() <COLON> Identifier() <RPAREN> (Stmt() | <LACC> Block() <RACC>)
}

void IfStmt() : {}
{
     <IF> <LPAREN> Expr() <RPAREN> (Stmt() | <LACC> Block() <RACC> [<ELSE> (Stmt() | <LACC> Block() <RACC>) ])
}


void WhileStmt() : {}
{
     <WHILE> <LPAREN> Expr() <RPAREN> (Stmt() | <LACC> Block() <RACC>)
}

void AssignStmt() : {}
{
	Identifier() <ASSIGN> Expr()
}


void Expr() : {Token t;}
{
    BoolExpr()
}

void BoolExpr() : {Token t;} {
    CompExpr() (t = <BOOLOP> {jjtThis.addOp(t.image);} CompExpr() )*
}

void CompExpr() : {Token t;}
{
    AddExpr() [t = <COMPARE> AddExpr() {jjtThis.setValue(t.image);}]
}

void AddExpr() : { Token t;}
{
    MulExpr() ((t = <PLUS> | t = <MINUS>) {jjtThis.addOp(t.image);} MulExpr())*
}

void MulExpr() : { Token t;}
{
    UnaExpr() (t = <MULOP> {jjtThis.addOp(t.image);} UnaExpr())*
}

void UnaExpr() : { Token t;}
{
     [t = <MINUS> {jjtThis.addOp(t.image);}] NotExpr()
}

void NotExpr() : { Token t;}
{
     (t = <NOT> {jjtThis.addOp(t.image);})* GenValue()
   }

void GenValue() : {}
{
    BoolValue()|
	Identifier()|
	IntValue() |
	RealValue() |
	(<LPAREN> Expr() <RPAREN>)

}

void BoolValue() : { Token t;}
{
    t = <BOOLEAN>  {jjtThis.setValue(t.image);}
}


void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}

void RealValue() : { Token t;}
{
    t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}